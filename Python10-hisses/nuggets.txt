"""" "" "" "" "" "" "" "" "" "" "" "" 
Hisses

Developed in 1990, Python is one of the most popular general-purpose programming languages in modern times.


The term “general-purpose” simply means that Python can be used for a variety of applications and does not focus on any one aspect of programming. 
""""" "" "" "" "" "" "" "" "" "" "" ""

	##To display Strings (group of characters enclosed in single or double quotes)##
print('Hello World') // Hello World
print("Hello World") // Hello World

	##To display Numbers##
print(50) // 50
print(1000) // 1000
print(3.142) // 3.142

	##To display multiple data##
print(50, 1000, 3.142, "Hello World", 'hello') // 50, 1000, 3.142, Hello World, hello 

##By default Python prints 'print'  statements on new lines hence to join these 'print'  statements use the 'end'  attribute with whatever value you wish.##
Use case:
print("Hello, come",  end=" ")
print("World") // Hello, come World

print("Hello", end=" ")
print("World") // Hello World

print("Hello", end="") 
print("World") // HelloWorld

	##Commenting
	To Comment, use the  hash (#)  for single-line and multi-line comment.
	 Do not use triple quotations """ """ for multi-line comments as if you put a comment in

"""
long comment here
"""
in the middle of a script, Python/linters won't recognize that. Folding will be messed up, as the above comment is not part of the standard recommendations. It's better to use

# Long comment
# here.
There is no such feature as a multi-line comment. # is the only way to comment a single line of code. 

Internally ''' in Python takes the lines enclosed regular strings which the interpreter does not ignores like comment using #. Instead use PEP's (https://legacy.python.org/dev/peps/pep-0008/#block-comments) standard guidelines. 

Use case:
print(50)  # This line prints 50
print("Hello World")  # This line prints Hello World


	##Python has three main data types: Numbers, Strings and Booleans## 
	
- -	- - - - - - - - - - - - - - - - - 
Numbers: (2, 3.142, 1000)
	1,	Integers: The amount of memory an integer occupies depends on its value. For example, 0 will take up 24 bytes whereas 1 would occupy 28 bytes.

Here are some examples of integers. 

print(10)  # A positive integer

print(-3000)  # A negative integer
​
num = 123456789  # Assigning an integer to a variable

print(num) // 123456789

num = -16000  # Assigning a new integer

print(num) // -16000 

"" "" "" "" "" "" "" "" "" 

	2, Floats: A float occupies 24 bytes of memory.

Below, we can find some examples of floats:

print(1.00000000005)  # A positive float

print(-85.6701)  # A negative float
​
flt_pt = 1.23456789

print(flt_pt) // 1.23456789

"" "" "" "" "" "" "" "" "" ""
		
	3,   Complexes: Just like the print() statement is used to print values, complex() is used to create complex numbers.

It requires two values. The first one will be the real part of the complex number, while the second value will be the imaginary part.

Here’s the template for making a complex number:

complex(real, imaginary)
Let’s see a few examples:

print(complex(10, 20))  # Represents the complex number (10 + 20j)

print(complex(2.5, -18.2))  # Represents the complex number (2.5 - 18.2j)
​
complex_1 = complex(0, 2)

complex_2 = complex(2, 0)

print(complex_1) // 2j

print(complex_2) // 2+0j

Note: In normal mathematics, the imaginary part of a complex number is denoted by i. However, in the code above, it is denoted by j. This is because Python follows the electrical engineering convention which uses j instead of i. Don’t let that confuse you.

Complex numbers are useful for modelling physics and electrical engineering models in Python. While they may not seem very relevant right now, it never hurts to know!

A complex number usually takes up 32 bytes of memory.

-------------------------------------


Strings: ("Hello", 'Dev hub', "Dev hub", '''Hello''', "") 
		A string is a collection of characters closed within single, double or triple quotation marks.

A string can also contain a single character or be entirely empty.

print("Harry Potter!")  # Double quotation marks

got = 'Game of Thrones.'  # Single quotation marks

print(got) // Game of Thrones 

print("$")  # Single character
​
empty = ""

print(empty)  # Just prints an empty line
​
multiple_lines = '''Triple quotes allows multi-line string.'''

print(multiple_lines) // Triple quotes allows multi-line string

A blank space inside the string quotation marks is also considered to be a character.
To add a multi-line string we can use triple quotes.


##The Length of a String##
The length of a string can be found using the len() built-in function. This length indicates the number of characters in the string:

random_string = "I am Batman"  # 11 characters

print(len(random_string)) // 11
​


##Indexing##
In a string, every character is given a numerical index based on its position.

A string in Python is indexed from 0 to n-1 where n is its length. This means that the index of the first character in a string is 0.



##Accessing Characters##
Each character in a string can be accessed using its index. The index must be closed within square brackets, [], and appended to the string.

batman = "Bruce Wayne"
​
first = batman[0]  # Accessing the first character

print(first) // B
​
space = batman[5]  # Accessing the empty space in the string

print(space) // 

last = batman[len(batman) - 1]

print(last) // e

# The following will produce an error since the index is out of bounds

# err = batman[len(batman)]
​
If we try to execute the code we would get an error because the maximum index is len(batman) - 1. A higher value is not within the bounds of the string. Since len(batman) is larger than len(batman) - 1, it will produce an error.

##Reverse Indexing##
We can also change our indexing convention by using negative indices.

Negative indices start from the opposite end of the string. Hence, the -1 index corresponds to the last character:

batman = "Bruce Wayne"

print(batman[-1])  # Corresponds to batman[10]

print(batman[-5])  # Corresponds to batman[6]

##String Immutability##
Once we assign a value to a string, we can’t update it later. How about verifying it with an executable below?

string = "Immutability"

string[0] = 'O' # Will give error

The above code gives TypeError because Python doesn’t support item assignment in case of strings.

Remember, assigning a new value to string variable doesn’t mean that you’ve changed the value. Let’s verify it with the id() method below.

str1 = "hello"

print(id(str1))
​
4
str1 = "bye"

print(id(str1))

Notice, when we assign a new value to str1 (at line 4) its identity changes not the value.

##ASCII Versus Unicode##
In Python 3.x, all strings are unicode. But, older versions of Python (Python 2.x) support only ASCII characters. To use unicode in Python 2.x, preceding the string with a u is must. For example:

string = u"This is unicode"

-------------------------------------

Booleans: (true, false) 
		The Boolean (also known as bool) data type allows us to choose between two values: true and false.

In Python, we can simply use True or False to represent a bool:

print(True) // True

f_bool = False

print(f_bool) // False

Note: The first letter of a bool needs to be capitalized in Python.
-------------------------------------

##NoneType##
	Python offers another data type called NoneType. It only has a single value, None. We can assign None to any variable, but we can not create other NoneType variables.

Let’s look at an example below.

val = None

print(val) # prints "None" and returns None

print (type(val)) # <class 'NoneType'>

Important Points#
None is not a default value for the variable that has not yet been assigned a value.
None is not the same as False.
None is not an empty string.
None is not 0. 

-------------------------------------

		##Variables##
	Variables are mutable. Hence, the value of a variable can always be updated or replaced.
	
Naming convention:

Numbers must not begin a variable name but can appear anywhere else: For example, 12income✖️ is not a valid name but income12✔️ or in12come✔️ are valid.

Case sensitivity: For example, Income and income are two different variables and not one.
You can define your income variable as Income or income, both are valid.

Underscores can appear anywhere: For example, _income or income_ are valid name, monthly_income is a valid name.

Variables must give meaningful information: For example, inc or even income would not give any useful information but names like weekly_income, monthly_income, or annual_income explain the purpose of our defined variable. 