"""" "" "" "" "" "" "" "" "" "" "" "" 
Hisses

Developed in 1990, Python is one of the most popular general-purpose programming languages in modern times.


The term “general-purpose” simply means that Python can be used for a variety of applications and does not focus on any one aspect of programming. 
""""" "" "" "" "" "" "" "" "" "" "" ""

	##To display Strings (group of characters enclosed in single or double quotes)##
print('Hello World') // Hello World
print("Hello World") // Hello World

	##To display Numbers##
print(50) // 50
print(1000) // 1000
print(3.142) // 3.142

	##To display multiple data##
print(50, 1000, 3.142, "Hello World", 'hello') // 50, 1000, 3.142, Hello World, hello 

##By default Python prints 'print'  statements on new lines hence to join these 'print'  statements use the 'end'  attribute with whatever value you wish.##
Use case:
print("Hello, come",  end=" ")
print("World") // Hello, come World

print("Hello", end=" ")
print("World") // Hello World

print("Hello", end="") 
print("World") // HelloWorld

	##Commenting
	To Comment, use the  hash (#)  for single-line and multi-line comment.
	 Do not use triple quotations """ """ for multi-line comments as if you put a comment in

"""
long comment here
"""
in the middle of a script, Python/linters won't recognize that. Folding will be messed up, as the above comment is not part of the standard recommendations. It's better to use

# Long comment
# here.
There is no such feature as a multi-line comment. # is the only way to comment a single line of code. 

Internally ''' in Python takes the lines enclosed as a regular strings which the interpreter does not ignores like comment using #. Instead use PEP's (https://legacy.python.org/dev/peps/pep-0008/#block-comments) standard guidelines. 

Use case:
print(50)  # This line prints 50
print("Hello World")  # This line prints Hello World


	##Python has three main data types: Numbers, Strings and Booleans## 
- -	- - - - - - - - - - - - - - - - - 
Numbers: (2, 3.142, 1000)
	1,	Integers: The amount of memory an integer occupies depends on its value. For example, 0 will take up 24 bytes whereas 1 would occupy 28 bytes.

Here are some examples of integers. 

print(10)  # A positive integer

print(-3000)  # A negative integer
​
num = 123456789  # Assigning an integer to a variable

print(num) // 123456789

num = -16000  # Assigning a new integer

print(num) // -16000 
"" "" "" "" "" "" "" "" "" 

	2, Floats: A float occupies 24 bytes of memory.

Below, we can find some examples of floats:

print(1.00000000005)  # A positive float

print(-85.6701)  # A negative float
​
flt_pt = 1.23456789

print(flt_pt) // 1.23456789
"" "" "" "" "" "" "" "" "" "" 
		
	3,   Complexes: Just like the print() statement is used to print values, complex() is used to create complex numbers.

It requires two values. The first one will be the real part of the complex number, while the second value will be the imaginary part.

Here’s the template for making a complex number:

complex(real, imaginary)
Let’s see a few examples:

print(complex(10, 20))  # Represents the complex number (10 + 20j)

print(complex(2.5, -18.2))  # Represents the complex number (2.5 - 18.2j)
​
complex_1 = complex(0, 2)

complex_2 = complex(2, 0)

print(complex_1) // 2j

print(complex_2) // 2+0j

Note: In normal mathematics, the imaginary part of a complex number is denoted by i. However, in the code above, it is denoted by j. This is because Python follows the electrical engineering convention which uses j instead of i. Don’t let that confuse you.

Complex numbers are useful for modelling physics and electrical engineering models in Python. While they may not seem very relevant right now, it never hurts to know!

A complex number usually takes up 32 bytes of memory.
-------------------------------------


Strings: ("Hello", 'Dev hub', "Dev hub") 

Booleans: (true, false) 

		##Variables##
	Variables are mutable. Hence, the value of a variable can always be updated or replaced.
	
Naming convention:

Numbers must not begin a variable name but can appear anywhere else: For example, 12income✖️ is not a valid name but income12✔️ or in12come✔️ are valid.

Case sensitivity: For example, Income and income are two different variables and not one.
You can define your income variable as Income or income, both are valid.

Underscores can appear anywhere: For example, _income or income_ are valid name, monthly_income is a valid name.

Variables must give meaningful information: For example, inc or even income would not give any useful information but names like weekly_income, monthly_income, or annual_income explain the purpose of our defined variable. 